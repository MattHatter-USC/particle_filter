diff --git a/bag2mat.py b/bag2mat.py
index 8f129ac..068ab14 100644
--- a/bag2mat.py
+++ b/bag2mat.py
@@ -191,6 +191,8 @@ class Bag2Mat:
                     viz_data = []
 		    seen = [False]*9
                     for mark in curr_msg.markers:
+			if (mark.id == 255):
+				continue
                         id_data.append(mark.id)
 			seen[mark.id] = True
 			viz_data.append(True)
@@ -258,7 +260,7 @@ if __name__ == '__main__':
     try:
 	seg_num
     except NameError:
-	seg_num = 5
+	seg_num = sys.argv[2]
     basename = 'data/bagfiles'
     demofile = basename + '/part' + str(seg_num) + '.bag'
     picklefile = basename + '/Pickle' + str(seg_num) + '.txt'
diff --git a/include/particle_filter/action.h b/include/particle_filter/action.h
index bcf58fa..4be3619 100644
--- a/include/particle_filter/action.h
+++ b/include/particle_filter/action.h
@@ -29,6 +29,7 @@ public:
   bool stopped;
   uint stopped_counter;
   tf::Vector3 action_direction;
+  tf::Vector3 result_vector;
   ros::Publisher vector_pub;
   ros::Subscriber effort_exceeded_sub;
 
diff --git a/include/particle_filter/articulation_manip_sensor_action_model.h b/include/particle_filter/articulation_manip_sensor_action_model.h
index 2df1a71..a37ea07 100644
--- a/include/particle_filter/articulation_manip_sensor_action_model.h
+++ b/include/particle_filter/articulation_manip_sensor_action_model.h
@@ -17,7 +17,7 @@ public:
   ///the bigger the scale the more stiff the controller
   double scale;
   double log_multiplier;
-  bool exponencial_likelihood, linear_likelihood, quadratic_likelihood, quadratic_likelihood_with_zero;
+  bool fancy_likelihood,exponencial_likelihood, linear_likelihood, quadratic_likelihood, quadratic_likelihood_with_zero;
 };
 
 
diff --git a/pickle.txt b/pickle.txt
index 321f87a..657051f 100644
--- a/pickle.txt
+++ b/pickle.txt
@@ -1,70 +1,11 @@
-0.000344, -0.066141, 0.003545, -0.069177, -0.017103, 0.016378, 0.997323, 
--0.001571, -0.066632, 0.002754, -0.061431, -0.011752, -0.016028, 0.997913, 
--0.001105, -0.067713, -0.000028, -0.031676, -0.011251, -0.007257, 0.999409, 
-0.068671, 0.000152, 0.002156, 0.000762, -0.035113, 0.705310, 0.708028, 
-0.068394, -0.000290, 0.002937, -0.010620, -0.033534, 0.703021, 0.710299, 
-0.068875, -0.000160, 0.001510, 0.004936, -0.024762, 0.702975, 0.710766, 
-0.068594, 0.002079, 0.002063, 0.002854, -0.019156, 0.719851, 0.693859, 
-0.001755, -0.068446, 0.001292, -0.003847, -0.010964, 0.019897, 0.999735, 
--0.001582, -0.068452, 0.003806, -0.037553, -0.005707, -0.001750, 0.999277, 
--0.000731, -0.068371, 0.003620, -0.032420, -0.008619, -0.001985, 0.999435, 
--0.001196, -0.069610, -0.000024, -0.023588, -0.019119, -0.030525, 0.999073, 
-0.000034, -0.069413, 0.001130, -0.022272, -0.019211, -0.008296, 0.999533, 
-0.002575, -0.070011, 0.001790, -0.017572, -0.023590, -0.004224, 0.999558, 
-0.000059, -0.068751, -0.000836, 0.000387, -0.027849, -0.024049, 0.999323, 
-0.004297, -0.068103, -0.000122, -0.002537, -0.014817, -0.011388, 0.999822, 
-0.000985, -0.068121, 0.002665, -0.016925, -0.020863, -0.018025, 0.999477, 
--0.001025, -0.068304, 0.001682, -0.012124, -0.015133, -0.011179, 0.999749, 
-0.001340, -0.068089, 0.001175, -0.010312, -0.005298, -0.002749, 0.999929, 
-0.005651, -0.067656, 0.000249, 0.000742, -0.010251, 0.034352, 0.999357, 
-0.001498, -0.068163, 0.000818, -0.009242, -0.012061, 0.025349, 0.999563, 
-0.000860, -0.068064, 0.000382, 0.003633, -0.011396, 0.005858, 0.999911, 
--0.000150, -0.068706, 0.004343, -0.036280, -0.005349, 0.000841, 0.999327, 
-0.002455, -0.068820, 0.001720, -0.026502, -0.009682, 0.008950, 0.999562, 
-0.002501, -0.069276, 0.000349, -0.014765, -0.020477, -0.003836, 0.999674, 
-0.004003, -0.069619, 0.000871, -0.023489, -0.028454, 0.028087, 0.998924, 
-0.002691, -0.069041, 0.001177, -0.019843, -0.025255, -0.002701, 0.999480, 
-0.001394, -0.068421, 0.000033, -0.000810, -0.014966, -0.037929, 0.999168, 
--0.002434, -0.068577, 0.001311, -0.007592, -0.009611, -0.041161, 0.999077, 
--0.000523, -0.069297, 0.003131, -0.029195, -0.027306, -0.002646, 0.999197, 
-0.001752, -0.068477, 0.004085, -0.032493, -0.021826, 0.030811, 0.998758, 
-0.001666, -0.068126, 0.001265, -0.015112, -0.009787, 0.034092, 0.999257, 
-0.001317, -0.067689, 0.001040, -0.007543, -0.005267, -0.000960, 0.999957, 
--0.001032, -0.068008, 0.002115, -0.006278, -0.014490, -0.044446, 0.998887, 
-0.002335, -0.068836, 0.002201, -0.019233, -0.030587, -0.010242, 0.999295, 
-0.000568, -0.069394, 0.001815, -0.031609, -0.032208, -0.037206, 0.998288, 
-0.001237, -0.069405, 0.000911, -0.024197, -0.041494, -0.032484, 0.998317, 
-0.003651, -0.068603, 0.000415, -0.008185, -0.020394, -0.015161, 0.999644, 
--0.000672, -0.067790, 0.001581, -0.001672, -0.022597, -0.013758, 0.999649, 
--0.002528, -0.067983, 0.003013, -0.009753, -0.022630, -0.043754, 0.998738, 
-0.003757, -0.067791, 0.001150, -0.007722, -0.025445, -0.006027, 0.999628, 
--0.000851, -0.067829, 0.000236, 0.001213, -0.012543, -0.000011, 0.999921, 
-0.001557, -0.067899, 0.000171, 0.000294, -0.011125, -0.000342, 0.999938, 
--0.002792, -0.067905, 0.000455, 0.004698, -0.013363, -0.022086, 0.999656, 
-0.002592, -0.067607, 0.001335, 0.002275, -0.024061, -0.001543, 0.999707, 
-0.001559, -0.068634, 0.001155, 0.003124, -0.010159, -0.000104, 0.999944, 
--0.001311, -0.068496, 0.001883, -0.007392, -0.034023, -0.035208, 0.998773, 
-0.005410, -0.068796, 0.002497, -0.023842, -0.020130, 0.007811, 0.999483, 
--0.000623, -0.069050, -0.000100, -0.008471, -0.026259, -0.048739, 0.998430, 
-0.001936, -0.068727, 0.000148, 0.002866, -0.020503, -0.020492, 0.999576, 
-0.001077, -0.067810, -0.000338, 0.013730, -0.025579, -0.006975, 0.999554, 
-0.003512, -0.067713, 0.001716, -0.010944, -0.024743, 0.010447, 0.999579, 
-0.002685, -0.067361, 0.001331, -0.006378, -0.021993, 0.019045, 0.999556, 
-0.002674, -0.067363, 0.000650, -0.000137, -0.013920, 0.012710, 0.999822, 
-0.000248, -0.067744, -0.000090, -0.002243, -0.018005, -0.003582, 0.999829, 
-0.000423, -0.067589, 0.000882, -0.013701, -0.020501, 0.008329, 0.999661, 
-0.002924, -0.067661, 0.000260, 0.000505, -0.023754, 0.019574, 0.999526, 
-0.000320, -0.067834, 0.000872, -0.008686, -0.022811, 0.006980, 0.999678, 
--0.000173, -0.068227, 0.002041, -0.009800, -0.027494, -0.006954, 0.999550, 
-0.001467, -0.068662, 0.002634, -0.016839, -0.027307, -0.010387, 0.999431, 
-0.003427, -0.068193, 0.000858, -0.017297, -0.016134, 0.000573, 0.999720, 
-0.000727, -0.068479, 0.001360, -0.017620, -0.023821, -0.043417, 0.998618, 
--0.000713, -0.068397, 0.002760, -0.007899, -0.023459, -0.030679, 0.999223, 
--0.002213, -0.067722, 0.001132, 0.003822, -0.025197, -0.035394, 0.999048, 
--0.000889, -0.067167, -0.000595, 0.008000, -0.016511, -0.019657, 0.999638, 
-0.000650, -0.067415, 0.001943, -0.013016, -0.018957, 0.017036, 0.999590, 
--0.002198, -0.067910, 0.003128, -0.019211, -0.019073, -0.038591, 0.998888, 
-0.001105, -0.067781, 0.000119, -0.005838, -0.028182, -0.004293, 0.999577, 
-0.000948, -0.067727, 0.000763, -0.001684, -0.024109, -0.037852, 0.998991, 
-0.002493, -0.068549, 0.001344, -0.000189, -0.010692, 0.008002, 0.999911, 
-0.001805, -0.068724, 0.001920, -0.018203, -0.023884, -0.004923, 0.999537, 
+0.005110, -0.070369, -0.003748, -0.005077, -0.002454, -0.689702, 0.724072, 
+0.000663, -0.070408, -0.000244, -0.031850, -0.036998, -0.699044, 0.713410, 
+-0.000172, -0.070180, -0.000617, -0.008626, -0.024642, -0.699435, 0.714219, 
+0.003368, -0.069955, -0.001720, -0.032683, -0.002641, 0.002018, 0.999460, 
+0.001383, -0.069985, -0.001164, -0.012855, 0.015152, 0.712588, 0.701301, 
+0.000683, -0.069866, -0.001262, -0.040801, -0.012600, 0.711408, 0.701481, 
+-0.000566, -0.070205, -0.003516, -0.038480, 0.002418, 0.720003, 0.692899, 
+-0.002748, -0.070115, 0.000013, -0.011896, 0.034483, 0.692582, 0.720416, 
+0.002925, -0.070247, -0.001493, -0.003282, 0.020517, 0.723958, 0.689531, 
+0.003451, -0.070492, 0.000211, -0.016521, 0.021273, 0.005828, 0.999620, 
+0.003698, -0.070401, -0.000505, -0.033602, 0.003092, 0.002471, 0.999427, 
diff --git a/scripts/entropy_plot.py b/scripts/entropy_plot.py
index 95d9c49..244c678 100644
--- a/scripts/entropy_plot.py
+++ b/scripts/entropy_plot.py
@@ -23,9 +23,9 @@ ran_err = [0.0443342644, 0.1390013777, 0.1290776394, 0.0629977619, 0.0285690042,
 
 # First illustrate basic pyplot interface, using defaults where possible.
 plt.figure()
-plt.errorbar(x, kld, yerr=kld_err, fmt='-o', capthick=2, ls="solid", label = "KLD")
-plt.errorbar(x, entr, yerr=entr_err, fmt='-o', capthick=2, ls="dotted", label = "Min. Entropy")
-plt.errorbar(x, ran, yerr=ran_err, fmt='-o', capthick=2, ls="dashed", label = "Random")
+plt.errorbar(x, kld, yerr=kld_err, fmt='-o', mew=2, ls="solid", label = "KLD")
+plt.errorbar(x, entr, yerr=entr_err, fmt='-o', mew=2, ls="dotted", label = "Min. Entropy")
+plt.errorbar(x, ran, yerr=ran_err, fmt='-o', mew=2, ls="dashed", label = "Random")
 plt.xlim(-0.5,7.5)
 plt.ylabel(r'Entropy')
 plt.xlabel(r'Push number')
diff --git a/scripts/visualizations.py b/scripts/visualizations.py
index ad380e5..031234d 100644
--- a/scripts/visualizations.py
+++ b/scripts/visualizations.py
@@ -1,4 +1,3 @@
-#!/usr/bin/env python
 
 """
 usage: %(progname)s [--obs] [--tracks]
@@ -77,7 +76,6 @@ class modelVisualizer:
 
     self.pub_array.publish(marker_array)
 
-
   def callbackAction(self, actions_msg):
 
     (position,orientation) = poseToArray(actions_msg.actions[1])
diff --git a/src/action.cpp b/src/action.cpp
index 94005c9..f1188e5 100644
--- a/src/action.cpp
+++ b/src/action.cpp
@@ -77,8 +77,15 @@ bool Action::execute(tf::Vector3& direction, const std::string& marker_tf, const
 //  moveit::planning_interface::MoveGroup::Plan my_plan;
 //  bool success = group.plan(my_plan);
   bool success = group.move();
-  sleep(3.0);
+  geometry_msgs::PoseStamped result_pose = group.getCurrentPose();
+  result_vector.setX(result_pose.pose.position.x);
+  result_vector.setY(result_pose.pose.position.y);
+  result_vector.setZ(result_pose.pose.position.z);
+  result_vector /= distance; //scale appropriately
+  //are freaking geometry_msgs::Point and Vector3 actually separate non-interoperable classes?
 
+  sleep(3.0);
+  
   group.setPoseTarget(current_pose);
   bool back_success = group.move();
 
diff --git a/src/articulation_manip_pose_sensoractionmodel.cpp b/src/articulation_manip_pose_sensoractionmodel.cpp
index 24871f4..8043ee2 100644
--- a/src/articulation_manip_pose_sensoractionmodel.cpp
+++ b/src/articulation_manip_pose_sensoractionmodel.cpp
@@ -7,7 +7,7 @@
 template <class StateType, class ZType, class AType> ArtManipPoseSensorActionModel<StateType, ZType, AType>::ArtManipPoseSensorActionModel()
 {
   distance_threshold = 0.07;
-  angle_threshold = 20 * M_PI/180;
+  angle_threshold = 20 * M_PI/180.0;
 }
 
 template <class StateType, class ZType, class AType> ArtManipPoseSensorActionModel<StateType, ZType, AType>::~ArtManipPoseSensorActionModel()
diff --git a/src/articulation_manip_sensor_action_model.cpp b/src/articulation_manip_sensor_action_model.cpp
index b19097d..66e5885 100644
--- a/src/articulation_manip_sensor_action_model.cpp
+++ b/src/articulation_manip_sensor_action_model.cpp
@@ -3,6 +3,7 @@
 #include "particle_filter/rotational_model.h"
 #include "particle_filter/random.h"
 
+#define matt_testing true
 
 template <class StateType, class ZType, class AType> ArtManipSensorActionModel<StateType, ZType, AType>::ArtManipSensorActionModel():
   scale(1.0), log_multiplier(1)
@@ -10,9 +11,11 @@ template <class StateType, class ZType, class AType> ArtManipSensorActionModel<S
   exponencial_likelihood = false;
   linear_likelihood = false;
   quadratic_likelihood = false;
-  quadratic_likelihood_with_zero = true;
+  quadratic_likelihood_with_zero = false; //why not just use an enum
+  fancy_likelihood = true;
 }
 
+
 template <class StateType, class ZType, class AType> ArtManipSensorActionModel<StateType, ZType, AType>::~ArtManipSensorActionModel()
 {
 }
@@ -42,15 +45,69 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
 {
   return 0.0;
 }
-// z = 1 means it doesnt stop
+// z = 1 means it succeeded
+
+
 template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPtr>::senseLogLikelihood(const int &z,
                                                                                                       const ActionPtr& a,
                                                                                                       const ArticulationModelPtr &state,
                                                                                                       const Eigen::MatrixXd &cov) const
 {
+  bool updated_prob_calc = true;
   double loglikelihood = 0;
   double prob_end = 0;
-
+  tf::Vector3 & action_vec = a->action_direction;
+  tf::Vector3 & result_vec = a->result_vector;
+  tf::Vector3 model_vec;
+  tf::Vector3 expectation_vec;
+  
+  switch(state->model) { //doing calculations for all models at once, later
+      case (RIGID): {
+          model_vec = tf::Vector3(0,0,0);
+          break;
+      }
+      case (PRISMATIC): {
+          state->getParam("current_proj_pose_prismatic_dir_in_current", model_vec);
+          break;
+      }
+      case (ROTATIONAL): {
+          state->getParam("current_proj_pose_rot_dir", model_vec);
+          break;
+      }
+      case (FREE): {
+          model_vec = action_vec; //will always agree, right?
+          break;
+      }
+  }
+  
+  model_vec.normalize();
+  result_vec /= action_vec.length();
+  action_vec.normalize();
+  expectation_vec = model_vec*((model_vec.dot(action_vec))/(model_vec.dot(model_vec))); //project the action onto the model to create a realistic expectation vector for the model
+  
+  
+  double action_result_relation = action_vec.dot(result_vec);
+  double action_model_relation = action_vec.dot(model_vec);
+  
+  bool square_products = true;
+  
+  if (square_products) {
+    action_result_relation = pow(action_result_relation,2);
+    action_model_relation = pow(action_model_relation,2);
+  }
+  
+  double agreement = 1.0-(expectation_vec-result_vec).length(); // projection minus the result
+  agreement = (agreement<0)?0:agreement; //fix
+  
+  prob_end = (action_result_relation * action_model_relation) + ((1.0-action_result_relation) * (1.0-action_model_relation));
+  prob_end *= agreement;
+  
+  
+  
+  loglikelihood = log(prob_end);
+  
+  
+  /*
   switch (state->model)
   {
     case (RIGID):
@@ -77,14 +134,17 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
 //        tf::Vector3 model_dir = prismatic_model->prismatic_dir;
         tf::Vector3 model_dir;
         state->getParam("current_proj_pose_prismatic_dir_in_current", model_dir);
-        tf::Vector3 action_dir = a->action_direction;
-        model_dir.normalize();
-        action_dir.normalize();
+        action_dir.normalize(); 
+        //model_dir /= old_magnitude;
+        
+        //action_dir.normalize();
+        //the result is scaled proportionately to the action direction, so don't normalize in quite the same way
+        //result_dir /= old_magnitude; //maintains proportionality
 
-        double angle_rad = model_dir.angle(action_dir);
+        //double angle_rad = model_dir.angle(action_dir);
 //        ROS_INFO("prismatic_proj_dir: x = %f, y = %f, z = %f;   action_dir: x = %f, y = %f, z = %f", (double)model_dir.getX(), (double)model_dir.getY(), (double)model_dir.getZ(), (double)action_dir.getX(), (double)action_dir.getY(), (double)action_dir.getZ());
 //        ROS_INFO("angle_rad(degrees) unchanged : %f", angle_rad * 180/M_PI);
-
+        
         // normalize the angle 0 < angle < 90
         double angle = angle_rad * 180/M_PI;
         int angle_int =  (int)angle % 180;
@@ -94,17 +154,44 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
           angle_int -= 180;
         }
         angle_rad = angle_int*M_PI/180;
-        angle_rad = fabs(angle_rad);
+        angle_rad = fabs(angle_rad); //Why?
+        
+        //while (angle < 0) {
+        //    angle += (M_PI/(double)2.000);
+        //}
+        //fmod(angle,M_PI/(double)2.000);
+        
 //        ROS_INFO("angle_rad(degrees) : %f", angle_rad* 180/M_PI);
+        
+        //just take the square of the dot product and you'll get the number you want :)
+        
 
-        double prob = 0;
+        double model_action_relation = model_dir.dot(action_dir);
+        double model_result_relation = model_dir.dot(result_dir);
+        double action_result_relation = action_dir.dot(result_dir);
+        
+        bool square_products = true;
+        
+        if (square_products) {
+            model_action_relation = pow(model_action_relation,2);
+            model_result_relation = pow(model_result_relation,2);
+            action_result_relation = pow(action_result_relation,2);
+        }
+        
+        #if !matt_testing
+            angle = action_result_relation*M_PI/2;
+        #endif
+        
+        
+        
+        //double prob = 0;
         if(exponencial_likelihood)
         {
           prob = exp(-scale*angle_rad);
         }
         else if (linear_likelihood)
         {
-          prob = -1.0/(M_PI/2) * angle_rad + 1;
+          prob = -1.0/(M_PI/2.0) * angle_rad + 1.0;
         }
         else if (quadratic_likelihood)
         {
@@ -112,7 +199,7 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
         }
         else if (quadratic_likelihood_with_zero)
         {
-          if (angle_rad > 40 * M_PI/180)
+          if (angle_rad > 40.0 * M_PI/180.0)
           {
             prob = 0;
           }
@@ -121,6 +208,9 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
             prob = 4.0/(pow(M_PI, 2)) * pow(angle_rad - M_PI/2.0, 2);
           }
         }
+        else if(fancy_likelihood) {
+            
+        }
 
         if (z == 1)
         {
@@ -129,8 +219,8 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
         }
         else
         {
-          loglikelihood = log(1-prob);
-          prob_end = 1-prob;
+          loglikelihood = log(1.0-prob);
+          prob_end = 1.0-prob;
         }
         break;
       }
@@ -141,32 +231,32 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
 //        ROS_ERROR("ROTATIONAL");
 
         //get current pose_obs
-        /*geometry_msgs::Pose pose_obs, pose_proj;
-        tf::Quaternion quad_obs;
-        tf::Vector3 pos_obs;
-        state->getParam("current_pose_trans", pos_obs);
-        state->getParam("current_pose_quat", quad_obs);
-        tf::Transform tf_pose_obs(quad_obs, pos_obs);
-        tf::poseTFToMsg(tf_pose_obs, pose_obs);
+        //geometry_msgs::Pose pose_obs, pose_proj;
+        //tf::Quaternion quad_obs;
+        //tf::Vector3 pos_obs;
+        //state->getParam("current_pose_trans", pos_obs);
+        //state->getParam("current_pose_quat", quad_obs);
+        //tf::Transform tf_pose_obs(quad_obs, pos_obs);
+        //tf::poseTFToMsg(tf_pose_obs, pose_obs);
 
         //project current pose_obs
-        V_Configuration q;
-        state->getCurrentPoseProjected(pose_obs, pose_proj, q);
-        tf::Transform tf_pose_proj;
-        tf::poseMsgToTF(pose_proj,tf_pose_proj);
+        //V_Configuration q;
+        //state->getCurrentPoseProjected(pose_obs, pose_proj, q);
+        //tf::Transform tf_pose_proj;
+        //tf::poseMsgToTF(pose_proj,tf_pose_proj);
 
         //get the tangent vector
-        tf::Matrix3x3 rot_axis_m(rotational_model->rot_axis);
-        tf::Vector3 rot_axis_z = rot_axis_m.getColumn(2);
-        tf::Vector3 radius = tf_pose_proj.getOrigin() - rotational_model->rot_center;
-        tf::Vector3 rot_proj_dir = radius.cross(rot_axis_z);
-        rot_proj_dir = rot_proj_dir * tf_pose_obs.getBasis();*/
+        //tf::Matrix3x3 rot_axis_m(rotational_model->rot_axis);
+        //tf::Vector3 rot_axis_z = rot_axis_m.getColumn(2);
+        //tf::Vector3 radius = tf_pose_proj.getOrigin() - rotational_model->rot_center;
+        //tf::Vector3 rot_proj_dir = radius.cross(rot_axis_z);
+        //rot_proj_dir = rot_proj_dir * tf_pose_obs.getBasis();
 
         tf::Vector3 rot_proj_dir;
         state->getParam("current_proj_pose_rot_dir", rot_proj_dir);
 
         tf::Vector3 action_dir = a->action_direction;
-
+        
         rot_proj_dir.normalize();
         action_dir.normalize();
         double angle_rad = rot_proj_dir.angle(action_dir);
@@ -174,7 +264,7 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
 //        ROS_INFO("angle_rad(degrees) unchanged : %f", angle_rad * 180/M_PI);
 
         // normalize the angle 0 < angle < 90
-        double angle = angle_rad * 180/M_PI;
+       // double angle = angle_rad  180/M_PI;
         int angle_int =  (int)angle % 180;
         angle_int = (angle_int + 180) % 180;
         if (angle_int > 90)
@@ -183,6 +273,11 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
         }
         angle_rad = angle_int*M_PI/180;
         angle_rad = fabs(angle_rad);
+        
+        //while (angle < 0) {
+        //    angle += (M_PI/(double)2.000);
+        //}
+        //fmod(angle,M_PI/(double)2.000);
 
 
         double prob = 0;
@@ -192,22 +287,23 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
         }
         else if (linear_likelihood)
         {
-          prob = -1.0/(M_PI/2) * angle_rad + 1;
+          prob = -1.0/(M_PI/2.0) * angle_rad + 1;
 //          ROS_INFO("angle_rad(degrees) : %f", angle_rad* 180/M_PI);
         }
         else if (quadratic_likelihood)
         {
-          prob = 4.0/(pow(M_PI, 2)) * pow(angle_rad - M_PI/2.0, 2);
+          //prob = 4.0/(pow(M_PI, 2)) * pow(angle_rad - M_PI/2.0, 2);
+         //prob =
         }
         else if (quadratic_likelihood_with_zero)
         {
-          if (angle_rad > 40 * M_PI/180)
+          if (angle_rad > 40.0 * M_PI/180.0)
           {
             prob = 0;
           }
           else
           {
-            prob = 4.0/(pow(M_PI, 2)) * pow(angle_rad - M_PI/2.0, 2);
+           // prob = 4.0/(pow(M_PI, 2)) * pow(angle_rad - M_PI/2.0, 2);
           }
         }
 
@@ -219,8 +315,8 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
         }
         else
         {
-          loglikelihood = log(1-prob);
-          prob_end = 1-prob;
+          loglikelihood = log(1.0-prob);
+          prob_end = 1.0-prob;
         }
         break;
       }
@@ -235,7 +331,8 @@ template <> double ArtManipSensorActionModel<ArticulationModelPtr, int, ActionPt
           loglikelihood = std::numeric_limits<double>::lowest()/log_multiplier;
         }
       }
-  }
+  }*/
+  
 //  ROS_ERROR("prob = %f",prob_end);
 //  ROS_ERROR("loglikelihood = %f",log_multiplier*loglikelihood);
   return log_multiplier*loglikelihood;
